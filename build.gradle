buildscript {
    ext {
        springBootVersion = '2.2.0.RELEASE'
        mooworkVersion = '1.2.0'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'com.moowork.node'
apply plugin: 'application'

mainClassName = 'com.freeefly.springbootreact.SpringbootReactApplication'
group = 'com.freeefly'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

final String DEFAULT_PROFILE = 'dev'
if(!project.hasProperty('profile') || !profile){
        ext.profile = DEFAULT_PROFILE
}

def webappDir = "$projectDir/src/main/webapp"
node {
    version = '10.16.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir=file("${project.buildDir}/npm")
}

print 'profile : ' + profile
if( profile != 'dev'){
    task appNpmInstall(type: NpmTask) {
        workingDir = file(webappDir)
        args = ["install"]
    }

    task appNpmBuild(type: NpmTask) {
        workingDir = file(webappDir)
        args = ['run', 'build']
    }

    task copyWebApp(type: Copy) {

    //    from "src/main/webapp/build" into 'build/resources/main/templates/.'
        from "src/main/webapp/build" into 'src/main/resources/templates/.'
    }

//    appNpmInstall.onlyIf { profile != 'dev'}
//    appNpmBuild.onlyIf { profile != 'dev'}
//    copyWebApp.onlyIf { profile != 'dev'}

    appNpmBuild.dependsOn appNpmInstall
    copyWebApp.dependsOn appNpmBuild
    compileJava.dependsOn copyWebApp
}
